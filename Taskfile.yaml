version: '3'

silent: true

vars:
  NAME: "csi-hyperstack"
  DRIVER_NAME: "hyperstack.csi.nexgencloud.com"
  IMAGE_REPO: '{{default "reg.digitalocean.ngbackend.cloud/nexgenk8s/csi-hyperstack" .IMAGE_REPO}}'

  DIR_DIST: "{{ .ROOT_DIR }}/dist"

dotenv: [".env"]

tasks:
  build-arm64:
    desc: |
      Builds the CSI driver for linux/arm64
    var:
      ARCH: "linux_arm64"
      SILENT: |-
        {{.SILENT | default "false"}}
    env:
      PACKAGE_NAME: "{{ .NAME }}"
      DRIVER_NAME: "{{ .DRIVER_NAME }}"
    cmds:
      # language=bash
      - |
        echo -n "Building csi driver for linux/arm64... "
        if [[ "{{ .SILENT }}" != "true" ]]; then
          echo ""
        fi
      # language=bash
      - |
        if [[ "{{ .SILENT }}" == "true" ]]; then
          exec &> /dev/null
        fi
        goreleaser check
        BIN_PATH="{{ .DIR_DIST }}/{{ .NAME }}"
        GOOS=linux GOARCH=arm64 goreleaser build --snapshot --clean --single-target
      # language=bash
      - echo "done"
      
  build:
    desc: |
      Builds the CSI driver for linux/amd64
    var:
      ARCH: "linux_amd64"
      SILENT: |-
        {{.SILENT | default "false"}}
    env:
      PACKAGE_NAME: "{{ .NAME }}"
      DRIVER_NAME: "{{ .DRIVER_NAME }}"
    cmds:
      # language=bash
      - |
        echo -n "Building csi driver for linux/amd64... "
        if [[ "{{ .SILENT }}" != "true" ]]; then
          echo ""
        fi
      # language=bash
      - |
        if [[ "{{ .SILENT }}" == "true" ]]; then
          exec &> /dev/null
        fi
        goreleaser check
        BIN_PATH="{{ .DIR_DIST }}/{{ .NAME }}"
        GOOS=linux GOARCH=amd64 goreleaser build --snapshot --clean --single-target
      # language=bash
      - echo "done"

  docker-build:
    desc: |
      Builds the docker image
    cmds:
      # language=bash
      - |
        docker buildx build --platform linux/amd64 --push \
          -f Dockerfile \
          -t "{{.IMAGE_REPO}}:latest-build" \
          --pull \
          --cache-from "{{.IMAGE_REPO}}:latest-build" \
          --target build \
          .

        docker buildx build --platform linux/amd64 --push \
          -f Dockerfile \
          -t "{{.IMAGE_REPO}}:latest" \
          --pull \
          --cache-from "{{.IMAGE_REPO}}:latest-build" \
          --cache-from "{{.IMAGE_REPO}}:latest" \
          --target runtime \
          .

  docker-push:
    desc: |
      Pushes the docker image
    cmds:
      # language=bash
      - |
        docker push {{.IMAGE_REPO}}

  start:
    desc: |
      Starts local CSI driver instance
    cmds:
      # language=bash
      - |
        docker-compose down
        docker-compose up -d
